// Generated by gencpp from file text_msgs/bb_box.msg
// DO NOT EDIT!


#ifndef TEXT_MSGS_MESSAGE_BB_BOX_H
#define TEXT_MSGS_MESSAGE_BB_BOX_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace text_msgs
{
template <class ContainerAllocator>
struct bb_box_
{
  typedef bb_box_<ContainerAllocator> Type;

  bb_box_()
    : xmax(0)
    , xmin(0)
    , ymax(0)
    , ymin(0)  {
    }
  bb_box_(const ContainerAllocator& _alloc)
    : xmax(0)
    , xmin(0)
    , ymax(0)
    , ymin(0)  {
  (void)_alloc;
    }



   typedef int32_t _xmax_type;
  _xmax_type xmax;

   typedef int32_t _xmin_type;
  _xmin_type xmin;

   typedef int32_t _ymax_type;
  _ymax_type ymax;

   typedef int32_t _ymin_type;
  _ymin_type ymin;





  typedef boost::shared_ptr< ::text_msgs::bb_box_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::text_msgs::bb_box_<ContainerAllocator> const> ConstPtr;

}; // struct bb_box_

typedef ::text_msgs::bb_box_<std::allocator<void> > bb_box;

typedef boost::shared_ptr< ::text_msgs::bb_box > bb_boxPtr;
typedef boost::shared_ptr< ::text_msgs::bb_box const> bb_boxConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::text_msgs::bb_box_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::text_msgs::bb_box_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::text_msgs::bb_box_<ContainerAllocator1> & lhs, const ::text_msgs::bb_box_<ContainerAllocator2> & rhs)
{
  return lhs.xmax == rhs.xmax &&
    lhs.xmin == rhs.xmin &&
    lhs.ymax == rhs.ymax &&
    lhs.ymin == rhs.ymin;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::text_msgs::bb_box_<ContainerAllocator1> & lhs, const ::text_msgs::bb_box_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace text_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::text_msgs::bb_box_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::text_msgs::bb_box_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::text_msgs::bb_box_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::text_msgs::bb_box_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::text_msgs::bb_box_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::text_msgs::bb_box_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::text_msgs::bb_box_<ContainerAllocator> >
{
  static const char* value()
  {
    return "65f8a458776ee81cb95e7c837498673e";
  }

  static const char* value(const ::text_msgs::bb_box_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x65f8a458776ee81cULL;
  static const uint64_t static_value2 = 0xb95e7c837498673eULL;
};

template<class ContainerAllocator>
struct DataType< ::text_msgs::bb_box_<ContainerAllocator> >
{
  static const char* value()
  {
    return "text_msgs/bb_box";
  }

  static const char* value(const ::text_msgs::bb_box_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::text_msgs::bb_box_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 xmax\n"
"int32 xmin\n"
"int32 ymax\n"
"int32 ymin\n"
;
  }

  static const char* value(const ::text_msgs::bb_box_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::text_msgs::bb_box_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.xmax);
      stream.next(m.xmin);
      stream.next(m.ymax);
      stream.next(m.ymin);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct bb_box_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::text_msgs::bb_box_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::text_msgs::bb_box_<ContainerAllocator>& v)
  {
    s << indent << "xmax: ";
    Printer<int32_t>::stream(s, indent + "  ", v.xmax);
    s << indent << "xmin: ";
    Printer<int32_t>::stream(s, indent + "  ", v.xmin);
    s << indent << "ymax: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ymax);
    s << indent << "ymin: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ymin);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TEXT_MSGS_MESSAGE_BB_BOX_H
