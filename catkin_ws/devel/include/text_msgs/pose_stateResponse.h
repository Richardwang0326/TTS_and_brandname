// Generated by gencpp from file text_msgs/pose_stateResponse.msg
// DO NOT EDIT!


#ifndef TEXT_MSGS_MESSAGE_POSE_STATERESPONSE_H
#define TEXT_MSGS_MESSAGE_POSE_STATERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <text_msgs/object_pose.h>

namespace text_msgs
{
template <class ContainerAllocator>
struct pose_stateResponse_
{
  typedef pose_stateResponse_<ContainerAllocator> Type;

  pose_stateResponse_()
    : state()
    , count(0)
    , ob_list()  {
    }
  pose_stateResponse_(const ContainerAllocator& _alloc)
    : state(_alloc)
    , count(0)
    , ob_list(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _state_type;
  _state_type state;

   typedef int32_t _count_type;
  _count_type count;

   typedef std::vector< ::text_msgs::object_pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::text_msgs::object_pose_<ContainerAllocator> >::other >  _ob_list_type;
  _ob_list_type ob_list;





  typedef boost::shared_ptr< ::text_msgs::pose_stateResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::text_msgs::pose_stateResponse_<ContainerAllocator> const> ConstPtr;

}; // struct pose_stateResponse_

typedef ::text_msgs::pose_stateResponse_<std::allocator<void> > pose_stateResponse;

typedef boost::shared_ptr< ::text_msgs::pose_stateResponse > pose_stateResponsePtr;
typedef boost::shared_ptr< ::text_msgs::pose_stateResponse const> pose_stateResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::text_msgs::pose_stateResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::text_msgs::pose_stateResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::text_msgs::pose_stateResponse_<ContainerAllocator1> & lhs, const ::text_msgs::pose_stateResponse_<ContainerAllocator2> & rhs)
{
  return lhs.state == rhs.state &&
    lhs.count == rhs.count &&
    lhs.ob_list == rhs.ob_list;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::text_msgs::pose_stateResponse_<ContainerAllocator1> & lhs, const ::text_msgs::pose_stateResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace text_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::text_msgs::pose_stateResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::text_msgs::pose_stateResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::text_msgs::pose_stateResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::text_msgs::pose_stateResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::text_msgs::pose_stateResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::text_msgs::pose_stateResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::text_msgs::pose_stateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ff2ee497754d2dae3dc7c0939cc82257";
  }

  static const char* value(const ::text_msgs::pose_stateResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xff2ee497754d2daeULL;
  static const uint64_t static_value2 = 0x3dc7c0939cc82257ULL;
};

template<class ContainerAllocator>
struct DataType< ::text_msgs::pose_stateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "text_msgs/pose_stateResponse";
  }

  static const char* value(const ::text_msgs::pose_stateResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::text_msgs::pose_stateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Response data\n"
"string state  # pick or suck\n"
"int32 count\n"
"object_pose[] ob_list\n"
"\n"
"================================================================================\n"
"MSG: text_msgs/object_pose\n"
"int32 object\n"
"string state 		# pick or suck\n"
"geometry_msgs/Pose pose\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::text_msgs::pose_stateResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::text_msgs::pose_stateResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
      stream.next(m.count);
      stream.next(m.ob_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pose_stateResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::text_msgs::pose_stateResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::text_msgs::pose_stateResponse_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.state);
    s << indent << "count: ";
    Printer<int32_t>::stream(s, indent + "  ", v.count);
    s << indent << "ob_list[]" << std::endl;
    for (size_t i = 0; i < v.ob_list.size(); ++i)
    {
      s << indent << "  ob_list[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::text_msgs::object_pose_<ContainerAllocator> >::stream(s, indent + "    ", v.ob_list[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TEXT_MSGS_MESSAGE_POSE_STATERESPONSE_H
