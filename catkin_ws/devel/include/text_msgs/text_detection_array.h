// Generated by gencpp from file text_msgs/text_detection_array.msg
// DO NOT EDIT!


#ifndef TEXT_MSGS_MESSAGE_TEXT_DETECTION_ARRAY_H
#define TEXT_MSGS_MESSAGE_TEXT_DETECTION_ARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <sensor_msgs/Image.h>
#include <sensor_msgs/Image.h>
#include <text_msgs/text_detection_msg.h>

namespace text_msgs
{
template <class ContainerAllocator>
struct text_detection_array_
{
  typedef text_detection_array_<ContainerAllocator> Type;

  text_detection_array_()
    : status()
    , image()
    , depth()
    , bb_count(0)
    , text_array()  {
    }
  text_detection_array_(const ContainerAllocator& _alloc)
    : status(_alloc)
    , image(_alloc)
    , depth(_alloc)
    , bb_count(0)
    , text_array(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _status_type;
  _status_type status;

   typedef  ::sensor_msgs::Image_<ContainerAllocator>  _image_type;
  _image_type image;

   typedef  ::sensor_msgs::Image_<ContainerAllocator>  _depth_type;
  _depth_type depth;

   typedef int32_t _bb_count_type;
  _bb_count_type bb_count;

   typedef std::vector< ::text_msgs::text_detection_msg_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::text_msgs::text_detection_msg_<ContainerAllocator> >::other >  _text_array_type;
  _text_array_type text_array;





  typedef boost::shared_ptr< ::text_msgs::text_detection_array_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::text_msgs::text_detection_array_<ContainerAllocator> const> ConstPtr;

}; // struct text_detection_array_

typedef ::text_msgs::text_detection_array_<std::allocator<void> > text_detection_array;

typedef boost::shared_ptr< ::text_msgs::text_detection_array > text_detection_arrayPtr;
typedef boost::shared_ptr< ::text_msgs::text_detection_array const> text_detection_arrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::text_msgs::text_detection_array_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::text_msgs::text_detection_array_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::text_msgs::text_detection_array_<ContainerAllocator1> & lhs, const ::text_msgs::text_detection_array_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status &&
    lhs.image == rhs.image &&
    lhs.depth == rhs.depth &&
    lhs.bb_count == rhs.bb_count &&
    lhs.text_array == rhs.text_array;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::text_msgs::text_detection_array_<ContainerAllocator1> & lhs, const ::text_msgs::text_detection_array_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace text_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::text_msgs::text_detection_array_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::text_msgs::text_detection_array_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::text_msgs::text_detection_array_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::text_msgs::text_detection_array_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::text_msgs::text_detection_array_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::text_msgs::text_detection_array_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::text_msgs::text_detection_array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "70b11adbdf88669325700427bf1cc417";
  }

  static const char* value(const ::text_msgs::text_detection_array_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x70b11adbdf886693ULL;
  static const uint64_t static_value2 = 0x25700427bf1cc417ULL;
};

template<class ContainerAllocator>
struct DataType< ::text_msgs::text_detection_array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "text_msgs/text_detection_array";
  }

  static const char* value(const ::text_msgs::text_detection_array_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::text_msgs::text_detection_array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string status				# O for non_return , X for return \n"
"sensor_msgs/Image image\n"
"sensor_msgs/Image depth\n"
"int32 bb_count\n"
"text_detection_msg[] text_array\n"
"================================================================================\n"
"MSG: sensor_msgs/Image\n"
"# This message contains an uncompressed image\n"
"# (0, 0) is at top-left corner of image\n"
"#\n"
"\n"
"Header header        # Header timestamp should be acquisition time of image\n"
"                     # Header frame_id should be optical frame of camera\n"
"                     # origin of frame should be optical center of camera\n"
"                     # +x should point to the right in the image\n"
"                     # +y should point down in the image\n"
"                     # +z should point into to plane of the image\n"
"                     # If the frame_id here and the frame_id of the CameraInfo\n"
"                     # message associated with the image conflict\n"
"                     # the behavior is undefined\n"
"\n"
"uint32 height         # image height, that is, number of rows\n"
"uint32 width          # image width, that is, number of columns\n"
"\n"
"# The legal values for encoding are in file src/image_encodings.cpp\n"
"# If you want to standardize a new string format, join\n"
"# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n"
"\n"
"string encoding       # Encoding of pixels -- channel meaning, ordering, size\n"
"                      # taken from the list of strings in include/sensor_msgs/image_encodings.h\n"
"\n"
"uint8 is_bigendian    # is this data bigendian?\n"
"uint32 step           # Full row length in bytes\n"
"uint8[] data          # actual matrix data, size is (step * rows)\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: text_msgs/text_detection_msg\n"
"string status				# O for non_return , X for return \n"
"float64 probability\n"
"geometry_msgs/Pose pose\n"
"bb_box box\n"
"int_arr[] contour\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: text_msgs/bb_box\n"
"int32 xmax\n"
"int32 xmin\n"
"int32 ymax\n"
"int32 ymin\n"
"================================================================================\n"
"MSG: text_msgs/int_arr\n"
"int32[] point\n"
;
  }

  static const char* value(const ::text_msgs::text_detection_array_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::text_msgs::text_detection_array_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
      stream.next(m.image);
      stream.next(m.depth);
      stream.next(m.bb_count);
      stream.next(m.text_array);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct text_detection_array_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::text_msgs::text_detection_array_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::text_msgs::text_detection_array_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.status);
    s << indent << "image: ";
    s << std::endl;
    Printer< ::sensor_msgs::Image_<ContainerAllocator> >::stream(s, indent + "  ", v.image);
    s << indent << "depth: ";
    s << std::endl;
    Printer< ::sensor_msgs::Image_<ContainerAllocator> >::stream(s, indent + "  ", v.depth);
    s << indent << "bb_count: ";
    Printer<int32_t>::stream(s, indent + "  ", v.bb_count);
    s << indent << "text_array[]" << std::endl;
    for (size_t i = 0; i < v.text_array.size(); ++i)
    {
      s << indent << "  text_array[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::text_msgs::text_detection_msg_<ContainerAllocator> >::stream(s, indent + "    ", v.text_array[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TEXT_MSGS_MESSAGE_TEXT_DETECTION_ARRAY_H
