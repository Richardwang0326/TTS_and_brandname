# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from text_msgs/text_detection_msg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import text_msgs.msg

class text_detection_msg(genpy.Message):
  _md5sum = "ba79c449ebbb021bfad5cb922f4b82d7"
  _type = "text_msgs/text_detection_msg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string status				# O for non_return , X for return 
float64 probability
geometry_msgs/Pose pose
bb_box box
int_arr[] contour

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: text_msgs/bb_box
int32 xmax
int32 xmin
int32 ymax
int32 ymin
================================================================================
MSG: text_msgs/int_arr
int32[] point"""
  __slots__ = ['status','probability','pose','box','contour']
  _slot_types = ['string','float64','geometry_msgs/Pose','text_msgs/bb_box','text_msgs/int_arr[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       status,probability,pose,box,contour

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(text_detection_msg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.status is None:
        self.status = ''
      if self.probability is None:
        self.probability = 0.
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.box is None:
        self.box = text_msgs.msg.bb_box()
      if self.contour is None:
        self.contour = []
    else:
      self.status = ''
      self.probability = 0.
      self.pose = geometry_msgs.msg.Pose()
      self.box = text_msgs.msg.bb_box()
      self.contour = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_8d4i().pack(_x.probability, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.box.xmax, _x.box.xmin, _x.box.ymax, _x.box.ymin))
      length = len(self.contour)
      buff.write(_struct_I.pack(length))
      for val1 in self.contour:
        length = len(val1.point)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(struct.Struct(pattern).pack(*val1.point))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.box is None:
        self.box = text_msgs.msg.bb_box()
      if self.contour is None:
        self.contour = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.status = str[start:end]
      _x = self
      start = end
      end += 80
      (_x.probability, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.box.xmax, _x.box.xmin, _x.box.ymax, _x.box.ymin,) = _get_struct_8d4i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.contour = []
      for i in range(0, length):
        val1 = text_msgs.msg.int_arr()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.point = s.unpack(str[start:end])
        self.contour.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_8d4i().pack(_x.probability, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.box.xmax, _x.box.xmin, _x.box.ymax, _x.box.ymin))
      length = len(self.contour)
      buff.write(_struct_I.pack(length))
      for val1 in self.contour:
        length = len(val1.point)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(val1.point.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.box is None:
        self.box = text_msgs.msg.bb_box()
      if self.contour is None:
        self.contour = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.status = str[start:end]
      _x = self
      start = end
      end += 80
      (_x.probability, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.box.xmax, _x.box.xmin, _x.box.ymax, _x.box.ymin,) = _get_struct_8d4i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.contour = []
      for i in range(0, length):
        val1 = text_msgs.msg.int_arr()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.point = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
        self.contour.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8d4i = None
def _get_struct_8d4i():
    global _struct_8d4i
    if _struct_8d4i is None:
        _struct_8d4i = struct.Struct("<8d4i")
    return _struct_8d4i
